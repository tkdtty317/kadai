作成　2022.06

# Gitを使用する目的
- バージョン管理
- ミスの特定を簡単にする。
- 作業のログを保管する。

# Gitの運用ルール
並行開発みたいなイメージ
2つのブランチを用意する。
masterブランチ
本番用　本番環境に設置

developブランチ
開発用　テスト環境に設置

開発用のブランチで作業、少人数の場合はdevelopブランチで作業しても大丈夫。
developブランチでの作業時に衝突(コンフリクト)が多発する場合や、
複数人で作業する場合は /作業者名/作業(場所)内容でブランチを作る。

複数人で作業する場合は管理者がコードレビュー後、問題なければdevelopブランチにマージする。


## 基本的な開発の流れ
1.リポジトリを作成する　（案件毎）
2.ソースコードの作成、編集を行う
3.新規作成、変更、削除をGitのインデックスに追加する
4.インデックスに追加された内容をローカルリポジトリにコミットする。

5.ローカルリポジトリの内容をリモートリポジトリ（GitHub）にプッシュする

## コミットのタイミング
セクション毎、構築完了するタイミング等。
細かく記録を残しておけば、いつでもそのポイントに戻せる。
コミットしないと、変更は記録されない。

### コミットメッセージのルール
注釈残す機能。
後からどんなタイミングでコミットしたかわかるような具体的内容、
作業者がわかるように記述する。
英語？


## マージを行うルール
:参考
https://gist.github.com/Gab-km/3705015

納品データについては、masterブランチとマージして管理。

ルール
- 1.masterブランチ は本番環境に設置(デプロイ)されているバージョンとする。

- 2.developブランチ はテスト環境に設置されたバージョンとする。

- 3.作業者が多くなった場合、featureブランチ(作業用のブランチ) はdevelop から分岐する。ブランチ名はfeature/作業者名/作業(場所)内容でブ作る。
※少人数の場合はfeatureブランチを作らなくても大丈夫。(衝突（コンフリクト）する可能性が少ない為。)

- 4.pull-request（PR）確認した後、確認者が develop にマージする。

- 5.マージされた feature ブランチは確認者が削除する。

- 6.管理者(作業責任者)がdevelopをテスト環境にデプロイする

- 7.管理者がdevelopを本番環境にデプロイする

- 8.管理者がmasterにdevelopをマージする

- 9.衝突(コンフリクト)が発生した場合は、手動で修正する。

### 本番環境でトラブルが発生した場合,新たな開発を進めている最中の対処方法
- 1.masterブランチからhotfixブランチを切る

- 2.hotfixブランチで修正対応。masterにpull-request（PR）-> マージ（コンフリクトを修正）-> 本番環境にデプロイ

- 3.完了したらhotfixをdebelopにPR。マージ（コンフリクトを修正）-> テスト環境にデプロイ

- 4.hotfixブランチは削除


### GitとGithubは違う
Git は　「ソースコードのバージョンを管理するツール」
GitHub は　GitHubはWebサービス　クラウド上にリモートリポジトリを提供する事で
共同作業や場所に関わらず開発ができる。
開発データの一時保管。


# GitHub の運用ルール
## プロジェクトの設定
非公開で使用。（Private）
GitHub Enterprise　企業向けのサービスもある。

## 疑問
Githubの保管期限はあるのか？
画像もコミット？容量大きくなるのでは？
//バージョン管理が必要ないファイルは無視でOK
ファイルのストレージに限界は？


soucetreeを使う方が感覚的にはわかりやすい。

