
#　ネタ

# cssの設計方法
## 関係性にmarginを設定する。


## IE終了後、使っていきたいcssのプロパティについて
IEに対応するために使えなかったCSSプロパティまとめ。

CSSだけで、動作ができるものはなるべくCSSを使う事で
JSよりも処理の効率も良くなり、作業の工数も減るので積極的に使っていきたい。

### position: stickyとinset: 0について
- position: sticky
    スクロールした際に、親要素を基点にボックス内の指定した位置に固定して表示できる。
    用語、
    スティッキーアイテム： position: sticky;を設定した要素のこと。
    スティッキーコンテナ： position: sticky;を設定した要素の親要素こと。

    position: absolute, fixedと違って高さはなくならない。
    スティッキーコンテナにposition: relative;を設置しなくて大丈夫。
    スティッキーアイテムよりもスティッキーコンテナに高さがあれば、position: stickyを設定するだけで動作する。
    top: 値;left～　等を指定して、スティッキーコンテナを基点に値の位置で固定された状態で表示される。
    z-indexも効く。
    positin: relative;に似た扱いという認識でも大丈夫そう。
    スティッキーコンテナがdisplay:flex;を設定して天地左右中央にスティッキーアイテムを設置した場合(display: flex)も適用される。スクロールした際に画面の表示位置と設定されたtop:値の位置で固定されて表示される。

    https://caniuse.com/?search=sticky


-   inset: 0;

    position: absolute;
    inset: 0;
    margin: auto; // margin: 0 auto; にすると左右の中心
        
    天地左右中央揃えの記述。
    position: absolute; , position: fixed;に設定すれば天地左右中央揃いが簡単に。
    inset: 0;がIE対応していなかった。
    top,bottom,right,left,すべての辺に適用される値をまとめて0にします。
    従来の書き方より少なく書ける。
    https://caniuse.com/?search=inset

### gapについて
    要素と要素の間の余白(縦・横)を指定するプロパティです。
    gap: 値;

    gap: 縦の値 横の値
    row-gap: 縦の値;
    column-gap: 横の値;

    flex-boxでの指定が可能。要素が横並びではない場合は適用されず。
    要素間のみに指定できるので、外側などに必要のない箇所には余白を発生させない。想定外のカラム落ちなどに

- gapで実装するメリット
    ・親要素で指定することで、子要素の余白管理ができる。記述もシンプル。
  
    ・子要素(flex-item)に対して、marginの打消し等の処理が要らない。nth,not系の処理がいらない。

- gapで実装するデメリット
    ・モダンプラウザには対応しているが、safari少し前のバージョンでは可否が異なる為、レイアウト崩れる原因にもなるかも。

    https://caniuse.com/?search=gap

    ・まとめて指定するため、デザインに余白の統一性が無い場合は、子要素(flex-item)に対して微調整が必要。

自分的には、間違いなく使用すべきだが、レイアウトやsafariについては考えて使用すべき。


### object-fitとaspect-ratioについて

- object-fit

用途は画像のトリミング。background-sizeで対応していた内容が、imgタグでも指定できる。
imgタグに対して使用する。 imgタグには高さを指定してあげる。
videoタグに対しても使用できる。
aspect-ratio と　object-fitを使用する事で画像の比率を維持したまま可変できるか？？

object-positionを使う事で表示位置の調整もできる。

object-fit: fill //縦横比崩しても、指定サイズに合わせる。初期値。
objact-fit: contain; //画像は切り抜かれず、画像領域にすっぽりと収まるようにリサイズされます（縦横比が保たれたまま、大きさが変わります）。画像の長辺がぴったりとくっつきます。
object-fit: cover; // 縦横比を保ち、はみ出る部分はトリミング。中央揃え。
object-fit: none; // リサイズせず元の画像の大きさで表示。
object-fit: scale-down; // 画像が大きい場合、指定のサイズにはみ出ないように収まる。小さい場合はそのサイズ。


https://caniuse.com/?search=object-fit
https://developer.mozilla.org/ja/docs/Web/CSS/object-fit

- aspect-ratio
    アスペクト比（縦横比）をCSSに定義するプロパティ。
    サイズが変わっても同じ比率を維持する。
    aspect-ratioの値は「width / height」の形で比率を指定します。
    aspect-ratio: 2 / 1;
    この指定だけで、要素のwidthから相対的な値で高さも算出してくれる。
    従来、可変の図形を作成する際はpadding-topに使用するなどして対応していたが、
    それに比べても少ない記述で利用可能。
    2022.7月現在では、主要プラウザには対応済。Safariに関しては少し前のverだと未対応。。
    aspect-ratioを使用すれば可変の正円、正方形も簡単に作成できる。

  ・https://caniuse.com/?search=aspect-ratio
　・アスペクト比計算ツール　https://ocadweb.com/aspectratiotools


## background-clip：text ; line-clamp；
- background-clip 
背景の適用範囲を指定できる。

background-clip: border-box; //背景を境界の外側の辺まで拡張します。
background-clip: padding-box; //背景をパディングの外側の辺まで拡張します
background-clip: content-box;　//背景をコンテンツボックスの中に (切り取って) 表示します。
background-clip: text; //背景を前景のテキストの中に表示します。

color: trasparent; をあてないと背景の画像が文字部分に表示されないので注意。
背景の画像はbackground-imageで指定。background-clipはbackground-imageを指定しているclass上で指定しないと効かない。
対象のテキストのhtmlはネストが深い位置にあっても大丈夫だが、position: absolute;が直接使えない様子。配置の仕方には注意。

https://caniuse.com/?search=background-clip%3Atext


- line-clamp
複数行テキストの省略表示する際に、文末を3点リーダーにする。テキストを指定した行数で省略します。
可変にも対応しているので、リキッドデザイン時には便利。

現状ではベンダープレフィックス「-webkit-」を追記する必要があるので注意。
-webkit-line-clamp: 3;　//この行の文末を3点リーダー
display: -webkit-box;
-webkit-box-orient: vertical;
overflow: hidden;

対象のtextのクラスに対して、これでセットで使用する。

長いテキストの省略はtext-overflowプロパティでも実装できるが、複数行のテキストには対応できない。

https://caniuse.com/?search=line-clamp


- scroll-behavior
css 1行だけでスムーススクロールを実装できる。

//htmlタグにあてないと効かない。
html{
    scroll-behavior: smooth;
}

scroll-behavior: auto;  //瞬時にスクロール 初期値
scroll-behavior: smooth; //滑らかにスクロール


・イージングの設定ができない。（スピードはプラウザに依存）
・CSS1行で実装可能だが、細かな設定ができない。(遷移先の位置調整等)
・全てのページ内リンクの動作が対象になる。

簡単にスムーススクロール実装できるが、使うタイミングに注意。

最新のプラウザには対応済み。
https://caniuse.com/?search=scroll-behavior

- filter
ボカシや色調整などの効果をCSSで表現できる機能です。
アニメーションにもつかえるので、画像のマウスオーバー時のエフェクトとしては便利。
画像に対して使えるので便利。

種類は全部で10種類

・ぼかし 画像のぼかしの具合を指定する。単位はpx等, %はしようできない。
filter: blur(2px);

・明度 画像の明るさを指定。
100％が基準となっていて、100%から大きくする明るくなり、小さくすると暗くなります。
filter: brightness(150%);

・コントラスト 画像のコントラストを指定します。
100％が基準となっていて、100%から大きくするコントラストが上がり、小さくするとコントラスト下がります。
filter: contrast(120%);

・ドロップシャドウ 画像に影をつける事ができる。
引数は4つあり、「X軸方向の位置」「Y軸方向の位置」「ぼかしの大きさ」「影の色」となります。
最初の2つは必須。
filter: drop-shadow(3px 3px 5px rgba(0,0,0,0.7));

・グレースケール 画像にグレースケールをかける事ができる。
0%を基準に100%で完全にグレースケールされた状態になります。
filter: grayscale(80%);

・色相環 色相を変更することができます。
値は色相環の回転を指定します。基準値は0degです。180degで色相が反転して、360degで元の色相になります。
filter: hue-rotate(45deg);

・階調の反転 階調をどの程度反転させるかを指定します。
0%を基準とし、100%で完全に階調が反転します。
filter: invert(100%);

・不透明度 画像の不透明度を指定します。
100%が元の画像、0%で完全に透明になります。背景色まで見えてしまうので、使い方には注意。
filter: opacity(30%);

・彩度 画像の彩度を指定します。
100%を基準として、100%より大きくすると鮮やかになります。100%より小さくすると彩度が下がり暗い色になります。0で無彩色になります。
filter: saturate(160%);

・セピア 画像をセピア調にします。
0%を基準とし、100%が最大値でセピア調になります。
filter: sepia(80%);

複数のfilterを指定する際は半角スペースを空けてフィルターを並べて記述します。いくつでも可能です。
filter: contrast(50%) blur(3px);



https://caniuse.com/?search=filter






- min(), max(), clamp(); //css数学関数




- mask-image

- max-content


- clip-path　ネタにならないかな。。
clip-path プロパティを使うと要素をクリッピング(切り抜いて表示)できる。
内側は表示、外側は非表示。
領域の境界線はクリッピングパスと呼ばれて、SVGのclipPath要素等で定義される。
img要素へあてる

https://caniuse.com/?search=clip-path



## GSAP の基本設定について
JSのアニメーションライブラリ、「GSAP」について。
公式サイト：https://greensock.com/docs/

### 導入

- cdnを読み込む
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.6.1/gsap.min.js"></script>

- 公式サイトからダウンロード、npm,githubからダウンロードして設置等
gsap.min.js

ScrollTrigger.min.js　//後にプラグインを読み込む。順番に注意。

### Tween
tweenという単位で動作を作っていきます。

##### Tweenの4つ種類
- to //ゴールの状態を指定。　現在の状態から、指定した状態へとアニメーションします。

    gsap.to(
        アニメーションさせる要素を指定(target),

        // ゴールの状態
        {
            プロバティ名: 値,
            プロバティ名: 値,
        },
        発火からアニメーション開始までの時間(秒で指定) 。指定しない場合は0秒
    )
- from  //開始の状態を指定。　指定した状態から、現在の状態へとアニメーションします。

    gsap.from(
        アニメーションさせる要素を指定(target),

        //開始される状態
        {
            プロバティ名: 値,
            プロバティ名: 値,
        }
    );

- fromTo //開始の状態と、ゴールの状態を指定してアニメーションします。durationはゴール状態の方に指定します。

    gsap.fromTo(
        アニメーションさせる要素を指定(target),

        //開始される状態
        {
            プロバティ名: 値,
            プロバティ名: 値,
        },

        //完了される状態
        {
            プロパティ名:値,
            プロパティ名:値,
        }
    );

- set // 状態を指定します。(CSSを使わずに、GSAP内で指定できます)

    gsap.set(
        ターゲットの要素

        //アニメーションさせない静止状態を指定する。
        {

        }
    );

##### gsap のプロパティ例
x: x軸方向に移動(単位はpx) ※translateX()のショートカット
y: y軸方向に移動(単位はpx) ※translateX()のショートカット
opacity: 透過(0 ～ 1)
scale: 大きさ(単位は倍)
backgroundColor: 背景色 
rotation: 回転
skew: 傾斜変形

trasformOrigin起点の位置を指定。デフォルト："50% 50%"(要素の中央)



##### gsap　の特殊なプロパティ例
duration: 値,　// アニメーションしている時間　デフォルト: 0.5
delay: 値, //アニメーションを開始するまでの遅延時間

onStart: 動作 ,  //アニメーションが開始するときに呼び出されるコールバックです。
    - onStartParamas: ["パラメータの値"] ,
onComplete: 動作　//アニメーションが終了するときに呼び出されるコールバックです。
    - onCompleteParamas: ["パラメータの値"] ,
onRepeat: 動作 //アニメーションが新しい反復サイクル(repeat)に入るたびに呼び出されるコールバックです。
    - onRepeatParams:["パラメータの値1","パラメータの値2"]

ease: イージングの値,  //https://greensock.com/docs/v2/Easing
stagger: 秒数, //各ターゲット/エレメントのアニメーションの開始時間をずらします。
reversed: true //逆再生
yoyo: true //

##### アニメーションの制御
to()、from()、fromTo()メソッドはすべてTweenインスタンスを返すので、
変数として保存しておけば、非常に簡単に制御することができます。

const tween = gsap.to(".target", {duration: 1, x: 100});

tween.play();    //アニメーションを再生
tween.pause();   //アニメーションを一旦停止
tween.resume();  //アニメーションの一旦停止から再アニメーション
tween.reverse(); //アニメーションの逆再生
tween.restart()  //アニメーションを最初から再生

##### Timeline
Tweenを連結して、長い(複雑な)アニメーションを作れます

タイムラインを作成し、.to()を連結してアニメーションを構成します。
初期状態を指定したい場合は、.set()を最初に指定します(timelineの外で指定することも可能)

const tl = gsap.timeline();

tl.to (
    アニメーションさせる要素を指定(target),

    {
        プロパティ: 値,
        プロパティ: 値,
    },
    発火からアニメーション開始までの時間
)
// .toで繋げて記述
.to(
    アニメーションさせる要素を指定(target),

    {
        プロパティ: 値,
        プロパティ: 値,
    },
    発火からアニメーション開始までの時間
)

###### 各Tweenの開始時間の指定
数値以外の指定も可能

+=数値　前のTween終了後に指定時間後　アニメーションスタート
-=数値  前のTween終了前に指定時間前  アニメーションスタート
>数値   1つ前ののTweenの終了時の指定した数値秒後(マイナスも指定可能、数値省略時はデフォルトの0.5になる)
<数値　1つ前のTweenの開始時の指定した数値秒後(マイナスも指定可能、数値省略時はデフォルトの0.5になる)
ラベル	他のラベル名+=数値、他のラベル名-=数値も可能

※　数値ではなく文字列なのでクォーテーションで囲むのを忘れないように。

// 動作のタイミングはコチラを確認　https://greensock.com/position-parameter

###### ラベル
ラベルを使用してタイムライン上の特定の位置をラベリングできます。
ラベルの位置を基準にアニメーションの動作タイミングを設定できます。

###### タイムラインの特殊プロパティ
- repeat: アニメーションを何回繰り返すか。
- repeatDelay: リピート間の時間（秒）を指定します。
- yoyo: trueの場合、繰り返し再生するたびに、前方・後方交互に再生されます。
- delay: タイムラインを開始するまでの時間（秒）を指定します。
- onComplete: タイムラインの再生が終了したときに呼び出される関数です。




## Grid Layout について
display: gap;



