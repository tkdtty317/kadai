作成　2022.02

# ガイドラインの目的
1 クオリティの向上
最適だと思われるルールをガイドラインとして制定することで、クオリティの向上を図る

2 クオリティの均一化
担当者によって制作物のバラつきを防ぐ

3 制作の効率化
ルールがあることでタイムロスを防ぐ
ルールを決めておくことで、無駄なチェック・修正の工数を削減する


# 基本的な考え方
・文書構造的に正しいマークアップを心がける。
・意味を持たないタグ（divやspanなど）は、レイアウト目的に使用し、過剰に使用したコードを書かない。
・コンテンツの増減で崩れない構造を意識する。
・デザインを再現するだけではなく、後のことを考えた更新性のあるコードを意識する。
・ユーザーの閲覧環境を考慮した作りにする。


## _/*＝＝＝＝＝　フォーマット規則　＝＝＝＝＝*/
・大文字を使用しない。
・入れ子時は字下げする。


## _/*＝＝＝＝＝　マークアップ　＝＝＝＝＝*/
・HTMLバージョン
特に指示がない限りはHTML Living standardを使用。

<!DOCTYPE html>

・文字コード
UTF-8を使用。
ファイルはBOM無しのUTF-8で保存してください。
<meta charset=”utf-8″>

・title指定について
先方の指定が無い場合には「ページ名｜サイト名」を指定する

・meta keywardについて
現在ではあまり意味がないので記述しなくてOK。

・パスの記述は原則相対パスを使用する。
・targe="_blank"をしようする際は　rel="noopener noreferrer" もあわせて記述

・<h1>～<h6>文章の構造に合わせて、見出しとしてしようする。
・<header>,<main>,<footer> タグは各ページ毎原則1つだけ。


・全てを大文字にすると読み上げブラウザでは文字単位で読み上げられるので、小文字+text-transform: uppercase を使用する


## _/*＝＝＝＝＝　画像　＝＝＝＝＝*/
・書き出す際はファイルサイズを意識して圧縮する。

・JPG・PNG・GIF・SVG・webp(ウェッピー)の使い分
    JPG：写真や色のグラデーションが複雑なもの
    PNG：PCで作成したデータや透明を使うもの
    GIF：色が単純なアニメーション
    SVG：ベクター形式で作成されたロゴ、文字
    WebP：画像が軽く、アニメーションにも対応しているが、全てのプラウザに対応していない。

・画像のネーミングルールは以下の通り
    　- bg_〇〇.jpg 背景画像
    　- icon_〇〇.jpg　装飾目的のアイコン画像
    　- img_〇〇.jpg　写真など、上2つの条件に当てはまらない画像
    ・altは画像を説明する具体的な内容を記述
    　（例）<img src="〇〇〇" alt="ハワイ「ファイブ スター シュリンプ」のガーリックシュリンプ">
    ・装飾目的の画像のaltは指定しなくてよい
    ・フォントはなるべく画像化せず、ウェブフォントを使用する

## _/*＝＝＝＝＝　スタイルシート　＝＝＝＝＝*/
・CSSファイルについて
ページ数が多い場合、各ページごとにCSSファイルを作成する。

・文字コードについて
文字コードは原則UTF-8を指定
※HTMLに合わせる

・ID・Classの使い分け
アンカーリンクの対象となる要素を除き、原則としてClassのみを使用してコーディングする。全ての要素にClass名を付与する。
アンカーリンクの対象となる要素に関しても、通常通りにClassでスタイルを付与する。
class名はわかりやすいものにする。

ID
アンカーリンクに使用するので、対象となるコンテンツ名を英訳したIDを付与します。

基本、id はjsでの使用に限る。 また、!importantは原則使わない。
※ cssの指定で詳細度が高くなり。修正の際などに、把握していない場合意図しない挙動がおこるため。

; Class名
; FLOCSSのルールに従って命名する。(命名規則)

・セレクタの書き方
セレクタにIDを使用しない
要素セレクタは必要性がなければ使用しない 



## _/*＝＝＝＝＝　JavaScript　＝＝＝＝＝*/
各動作にはコメントを付ける
外部JavaScriptファイルの読み込みは、原則として</body>の直前で行う
</body>の直前での読み込みだと動作に問題がある場合は<head>...</head>内で読み込む。　※deferをつける。
本番サイトのでの作業の場合、CDN利用を控える ※jQueryのCDNは稀に読み込みが遅くなって表示が崩れたりするケースがある。
npmまたはvenderディレクトリを使う。

・全て、もしくはほとんどのページで使用するものはcommon.jsにまとめて記述する

//記述は保守を考え統一すること。
$(window).on('scroll', function(){});					
jQuery(window).on('scroll',function(){})	


const let の記述ルール
constは定数なのでDOMの指定と定数、変数はletを使います。
DOMを変数に入れる場合はjQueryオブジェクトではなく、クラス名などの方が応用しやすいです。

例）					
	let newsLink = $('.js-news-tab-btn'); 					
	↓					
	const newsLink = '.js-news-tab-btn';	

## _/*＝＝＝＝＝　ディレクトリの構成について　＝＝＝＝＝*/
・ごみファイルはつけない。


## _/*＝＝＝＝＝　レスポンシブ対応　＝＝＝＝＝*/　定期的な検証が必要

・sp版のレイアウトからコーディングする。　(min-width:～）を使用して、原則モバイルファースト。
・モバイル対応の下限サイズは320pxとする
・どのウィンドウサイズでもレイアウトが崩れないようにコーディングし、指定サイズのみでは表示が難しい場合、例外的に@media screenを追加指定しても良い
//ブレイクポイントについてはデザインナーとの共有、定期的な検証が必要
・タブレットサイズ768－1024px
・モバイルサイズ767px以下
・PCサイズ1025px～


## _/*＝＝＝＝＝　検証・対応ブラウザ　＝＝＝＝＝*/
・pc
Internet Explorer：11以降  ※2022 年 6 月 16 日でサポート終了
Firefox：最新版
Safari：最新版
Google Chrome：最新版
Microsoft Edge：最新版

・sp
iPhone：最新と一つ前のiOSでSafari、Google Chrome最新版
Android：2つ前以降のOSでGoogle Chrome最新版




## _/*＝＝＝＝＝　環境構築　＝＝＝＝＝*/
gulp,ejs,webpackの活用
　・作業環境を均一にすべきか？？


## _/*＝＝＝＝＝　ソース管理について　＝＝＝＝＝*/

Gitの活用